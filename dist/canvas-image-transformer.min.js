const CanvasImageTransformer=function(){const a=function(c,d,e,b){return(c<<24)+(d<<16)+(e<<8)+b},b=function(a,b,c,d){const e=4*(c+d*b);return[a[e]/255,a[e+1]/255,a[e+2]/255,a[e+3]/255]},c=function(a,b){this.getMatrixArray=function(){return a},this.getWidth=function(){return b}};return{colorToRGBA:function(a){return[255&a>>24,255&a>>16,255&a>>8,255&a]},rgbaToColor:a,createKernel:function(a,b){return new c(a,b)},imageToCanvas:function(a,b,c,d){d&&(a.width>a.height?c*=a.height/a.width:a.height>a.width&&(b*=a.width/a.height));const e=document.createElement("canvas");e.width=b,e.height=c;const f=e.getContext("2d");return f.drawImage(a,0,0,b,c),e},videoFrameToCanvas:function(a,b,c,d){d&&(a.videoWidth>a.videoHeight?c*=a.videoHeight/a.videoWidth:a.height>a.videoWidth&&(b*=a.videoWidth/a.videoHeight));const e=document.createElement("canvas");e.width=b,e.height=c;const f=e.getContext("2d");return f.drawImage(a,0,0,b,c),e},toWebGLCanvas:function(a){var b=Math.cos;const c=document.createElement("canvas");c.width=a.width,c.height=a.height;let d=c.getContext("webgl2");if(d||(d=c.getContext("webgl")),!d)throw"Browser does not support WebGL";d.viewport(0,0,a.width,a.height),d.clearColor(0,0,0,0),d.clear(d.COLOR_BUFFER_BIT);const e={};e.verts=[-1,1,0,-1,-1,0,1,-1,0,1,1,0],e.normals=[],e.indices=[0,1,3,2],e.texcoords=[0,0,0,1,1,1,1,0],e.vertexBuffer=d.createBuffer(),d.bindBuffer(d.ARRAY_BUFFER,e.vertexBuffer),d.bufferData(d.ARRAY_BUFFER,new Float32Array(e.verts),d.STATIC_DRAW),e.vertexBuffer.itemSize=3,e.vertexBuffer.numItems=e.verts.length/3,e.indexBuffer=d.createBuffer(),d.bindBuffer(d.ELEMENT_ARRAY_BUFFER,e.indexBuffer),d.bufferData(d.ELEMENT_ARRAY_BUFFER,new Uint16Array(e.indices),d.STATIC_DRAW),e.indexBuffer.itemSize=1,e.indexBuffer.numItems=e.indices.length,e.texcoordBuffer=d.createBuffer(),d.bindBuffer(d.ARRAY_BUFFER,e.texcoordBuffer),d.bufferData(d.ARRAY_BUFFER,new Float32Array(e.texcoords),d.STATIC_DRAW),e.texcoordBuffer.itemSize=2,e.texcoordBuffer.numItems=e.texcoords.length/2;const f=new Float32Array([1,0,0,0,0,1,0,0,0,0,.019980020821094513,0,-0,-0,-.9980019927024841,1]),g=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,-0,-0,-0,1]),h=d.createProgram(),i=d.createShader(d.VERTEX_SHADER);d.shaderSource(i,`
                attribute vec3 aVertexPosition;
                attribute vec2 aTextureCoord;
                uniform mat4 uMVMatrix;
                uniform mat4 uPMatrix;
                varying vec2 vTextureCoord;
                
                void main(void) {
                    gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
                    vTextureCoord = aTextureCoord;
                }            
            `),d.compileShader(i);const j=d.createShader(d.FRAGMENT_SHADER);d.shaderSource(j,"\n                precision mediump float;\n\n                uniform float uPeriod;\n                uniform float uSceneWidth;\n                uniform float uSceneHeight;\n                uniform sampler2D uSampler;\t\t  \n                varying vec2 vTextureCoord;\n                \n                void main(void) {               \n                    vec4 shiftedSampleLeft = vec4( 0. );\n                    vec4 shiftedSampleRight = vec4( 0. );\n\n                    float blurSampleOffsetScale = 2.1;\n                    float px = (1.0 / uSceneWidth) * blurSampleOffsetScale;\n                    float py = (1.0 / uSceneHeight) * blurSampleOffsetScale;\n                \n                    vec4 src = texture2D( uSampler, ( vTextureCoord ) );\n                \n                    shiftedSampleLeft = texture2D( uSampler, ( vTextureCoord + vec2(-0.01525, 0) ) );\n                    shiftedSampleRight = texture2D( uSampler, ( vTextureCoord + vec2(0.01525, 0) ) );\n                \n                    gl_FragColor = src * vec4(1, shiftedSampleLeft.g, 1, 1) * vec4(shiftedSampleRight.r, 1, 1, 1);\n                }\n            "),d.compileShader(j),d.attachShader(h,i),d.attachShader(h,j),d.linkProgram(h),h.vertexPositionAttribute=d.getAttribLocation(h,"aVertexPosition"),h.pMatrixUniform=d.getUniformLocation(h,"uPMatrix"),h.mvMatrixUniform=d.getUniformLocation(h,"uMVMatrix"),h.textureCoordAttribute=d.getAttribLocation(h,"aTextureCoord"),h.uPeriod=d.getUniformLocation(h,"uPeriod"),h.uSceneWidth=d.getUniformLocation(h,"uSceneWidth"),h.uSceneHeight=d.getUniformLocation(h,"uSceneHeight"),d.enableVertexAttribArray(h.vertexPositionAttribute),d.enableVertexAttribArray(h.textureCoordAttribute);const k=d.createTexture();d.useProgram(h),d.activeTexture(d.TEXTURE0),d.bindTexture(d.TEXTURE_2D,k),d.texImage2D(d.TEXTURE_2D,0,d.RGBA,d.RGBA,d.UNSIGNED_BYTE,a),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_WRAP_S,d.CLAMP_TO_EDGE),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_WRAP_T,d.CLAMP_TO_EDGE),d.texParameteri(d.TEXTURE_2D,d.TEXTURE_MIN_FILTER,d.LINEAR),d.uniform1i(h.samplerUniform,0),d.bindBuffer(d.ARRAY_BUFFER,e.vertexBuffer),d.vertexAttribPointer(h.vertexPositionAttribute,e.vertexBuffer.itemSize,d.FLOAT,!1,0,0),d.bindBuffer(d.ARRAY_BUFFER,e.texcoordBuffer),d.vertexAttribPointer(h.textureCoordAttribute,e.texcoordBuffer.itemSize,d.FLOAT,!1,0,0),d.uniformMatrix4fv(h.pMatrixUniform,!1,f),d.uniformMatrix4fv(h.mvMatrixUniform,!1,g),d.bindBuffer(d.ELEMENT_ARRAY_BUFFER,e.indexBuffer);var l=b(.2);return d.uniform1f(h.uPeriod,l+1),d.uniform1f(h.uSceneWidth,d.viewportWidth),d.uniform1f(h.uSceneHeight,d.viewportHeight),d.drawElements(d.TRIANGLE_STRIP,e.indexBuffer.numItems,d.UNSIGNED_SHORT,0),c},applyKernel:function(a,c){const d=a.getContext("2d"),e=d.getImageData(0,0,a.width,a.height).data,f=new Uint8ClampedArray(4*(a.width*a.height)),g=c.getWidth(),h=c.getMatrixArray();for(let d=0;d<a.height;d++)for(let c,i=0;i<a.width;i++){c=[0,0,0,0];for(let f=0;f<g;f++)for(let j=0;j<g;j++){const k=j+f*g,l=j-(g-1)/2,m=f-(g-1)/2;let n=i+l,o=d+m;if(0>n||0>o||n>=a.width||o>=a.height)continue;const p=b(e,a.width,n,o);c[0]+=h[k]*p[0],c[1]+=h[k]*p[1],c[2]+=h[k]*p[2],0===l&&0===m&&(c[3]=p[3])}const j=4*(i+d*a.width);f[j+0]=parseInt(255*c[0]),f[j+1]=parseInt(255*c[1]),f[j+2]=parseInt(255*c[2]),f[j+3]=parseInt(255*c[3])}return d.putImageData(new ImageData(f,a.width,a.height),0,0),a},toGrayscale:function(a){for(var b,c=a.getContext("2d"),d=c.getImageData(0,0,a.width,a.height),e=0;e<d.data.length;e+=4)b=parseInt(255*(.2126*(d.data[e]/255)+.7152*(d.data[e+1]/255)+.0722*(d.data[e+2]/255))),d.data[e]=b,d.data[e+1]=b,d.data[e+2]=b;return c.putImageData(d,0,0),a},toBlackAndWhite:function(a){for(var b,c=a.getContext("2d"),d=c.getImageData(0,0,a.width,a.height),e=0;e<d.data.length;e+=4)b=.2126*(d.data[e]/255)+.7152*(d.data[e+1]/255)+.0722*(d.data[e+2]/255),.5>b?(d.data[e]=0,d.data[e+1]=0,d.data[e+2]=0,d.data[e+3]=255):(d.data[e]=255,d.data[e+1]=255,d.data[e+2]=255,d.data[e+3]=255);return c.putImageData(d,0,0),a},computeColorFrequencyMap:function(b){for(var c,d=new Map,e=b.getContext("2d"),f=e.getImageData(0,0,b.width,b.height),g=0;g<f.data.length;g+=4)c=a(f.data[g],f.data[g+1],f.data[g+2],f.data[g+3]),d.has(c)?d.set(c,d.get(c)+1):d.set(c,1);return d}}}();"undefined"!=typeof module&&module.exports&&(module.exports=CanvasImageTransformer);